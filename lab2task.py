# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12HKm7yVlDrgqvgfVDknkqQt5Y4KQsXCz
"""

import matplotlib.pyplot as plt
import random

# Constants
average_price = 600
price_threshold = average_price * 0.8  # 20% discount
critical_stock_level = 10
default_order_quantity = 15
minimum_order_quantity = 10

# Simulation variables
time_steps = 30  # Number of days to simulate
stock_level = 20  # Initial stock
prices = []
stock_levels = []
orders = []

# Simulation loop
for day in range(1, time_steps + 1):
    # Simulate a random price for the day
    price = random.randint(450, 650)  # Random price between 450 and 650
    prices.append(price)

    # Decision process
    if price <= price_threshold and stock_level >= critical_stock_level:
        # Good price but stock is not critical
        tobuy = default_order_quantity
    elif stock_level < critical_stock_level:
        # Stock is critically low
        tobuy = minimum_order_quantity
    else:
        # No need to order
        tobuy = 0

    # Update stock level
    stock_level += tobuy  # Add new orders to stock
    stock_level -= random.randint(1, 5)  # Simulate daily sales (1 to 5 units)
    stock_level = max(0, stock_level)  # Stock can't go negative

    # Track stock levels and orders
    stock_levels.append(stock_level)
    orders.append(tobuy)

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(range(1, time_steps + 1), prices, label="Prices (BDT)", color="blue")
plt.plot(range(1, time_steps + 1), stock_levels, label="Stock Levels", color="green")
plt.bar(range(1, time_steps + 1), orders, label="Orders Placed", color="orange", alpha=0.6)
plt.axhline(price_threshold, color="red", linestyle="--", label="Price Threshold")
plt.axhline(critical_stock_level, color="purple", linestyle="--", label="Critical Stock Level")
plt.xlabel("Day")
plt.ylabel("Values")
plt.title("Smartphone Inventory Management Simulation")
plt.legend()
plt.grid()
plt.show()